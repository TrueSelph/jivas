name: Release Python Package

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  check-version:
    name: Check Package Version
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      new_version: ${{ steps.check.outputs.new_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous version from Git tags
        id: get_previous_version
        run: |
          git fetch --tags
          VERSION_TAG=$(git tag --list "v*" --sort=-v:refname | head -n 1 | sed 's/^v//')
          echo "previous_version=${VERSION_TAG:-0.0.0}" >> $GITHUB_ENV
          echo "Previous version: $VERSION_TAG"
          echo "previous_version=${VERSION_TAG:-0.0.0}" >> $GITHUB_OUTPUT

      - name: Get current version from __init__.py
        id: check
        run: |
          CURRENT_VERSION=$(grep -oP '__version__\s*=\s*"\K[^"]+' ./__init__.py)
          echo "Detected package version: $CURRENT_VERSION"
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          if [ "$CURRENT_VERSION" != "$previous_version" ]; then
            echo "version_changed=true" >> $GITHUB_ENV
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $VERSION_TAG to $CURRENT_VERSION"
          else
            echo "version_changed=false" >> $GITHUB_ENV
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Version did not change"
          fi

  publish:
    name: Publish Package & Create Release
    needs: check-version
    if: ${{ needs.check-version.outputs.version_changed == 'true' }}
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel twine

      - name: Install dependencies
        working-directory: ./core
        run: |
          pip install ../jvcli ../jvserve ../jvclient
          pip install .[dev]

      - name: Transpile jac code to python
        run: |
          export JACPATH=$(pwd)
          jac run main.jac
        continue-on-error: false

      - name: Build core package
        working-directory: ./core
        run: python setup.py sdist bdist_wheel

      - name: Build jvcli package
        working-directory: ./jvcli
        run: python setup.py sdist bdist_wheel

      - name: Build jvclient package
        working-directory: ./jvclient
        run: python setup.py sdist bdist_wheel

      - name: Build jvmanager package
        working-directory: ./jvmanager
        run: python setup.py sdist bdist_wheel

      - name: Build jvserve package
        working-directory: ./jvserve
        run: python setup.py sdist bdist_wheel

      - name: Publish core to PyPI
        working-directory: ./core
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          PACKAGE_NAME=$(python setup.py --name)
          PACKAGE_VERSION=$(python setup.py --version)
          if curl --silent --fail "https://pypi.org/pypi/${PACKAGE_NAME}/${PACKAGE_VERSION}/json"; then
            echo "Version ${PACKAGE_VERSION} of ${PACKAGE_NAME} already exists on PyPI. Skipping upload."
          else
            twine upload dist/*
          fi

      - name: Publish jvcli to PyPI
        working-directory: ./jvcli
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          PACKAGE_NAME=$(python setup.py --name)
          PACKAGE_VERSION=$(python setup.py --version)
          if curl --silent --fail "https://pypi.org/pypi/${PACKAGE_NAME}/${PACKAGE_VERSION}/json"; then
            echo "Version ${PACKAGE_VERSION} of ${PACKAGE_NAME} already exists on PyPI. Skipping upload."
          else
            twine upload dist/*
          fi

      - name: Publish jvclient to PyPI
        working-directory: ./jvclient
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          PACKAGE_NAME=$(python setup.py --name)
          PACKAGE_VERSION=$(python setup.py --version)
          if curl --silent --fail "https://pypi.org/pypi/${PACKAGE_NAME}/${PACKAGE_VERSION}/json"; then
            echo "Version ${PACKAGE_VERSION} of ${PACKAGE_NAME} already exists on PyPI. Skipping upload."
          else
            twine upload dist/*
          fi

      - name: Publish jvmanager to PyPI
        working-directory: ./jvmanager
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          PACKAGE_NAME=$(python setup.py --name)
          PACKAGE_VERSION=$(python setup.py --version)
          if curl --silent --fail "https://pypi.org/pypi/${PACKAGE_NAME}/${PACKAGE_VERSION}/json"; then
            echo "Version ${PACKAGE_VERSION} of ${PACKAGE_NAME} already exists on PyPI. Skipping upload."
          else
            twine upload dist/*
          fi

      - name: Publish jvserve to PyPI
        working-directory: ./jvserve
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          PACKAGE_NAME=$(python setup.py --name)
          PACKAGE_VERSION=$(python setup.py --version)
          if curl --silent --fail "https://pypi.org/pypi/${PACKAGE_NAME}/${PACKAGE_VERSION}/json"; then
            echo "Version ${PACKAGE_VERSION} of ${PACKAGE_NAME} already exists on PyPI. Skipping upload."
          else
            twine upload dist/*
          fi

      - name: Upload to GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${{ needs.check-version.outputs.new_version }}"

          # Create the release only if it doesn’t already exist
          if ! gh release view "$TAG" > /dev/null 2>&1; then
            gh release create "$TAG" \
              --title "Release $TAG" \
              --generate-notes
          fi

          # Upload each package’s artifacts
          for pkg in core jvcli jvmanager jvserve jvclient; do
            echo "Uploading $pkg/dist/* to $TAG…"
            gh release upload "$TAG" "$pkg/dist/*" --clobber
          done

  docker:
    name: Build and Push Docker Image
    needs: [check-version, publish]
    if: ${{ needs.check-version.outputs.version_changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Private Registry
        uses: docker/login-action@v3
        with:
          registry: registry.v75inc.dev
          username: ${{ secrets.V75_REGISTRY_USER }}
          password: ${{ secrets.V75_REGISTRY_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/jivas.Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/trueselph/jivas:latest
            ghcr.io/trueselph/jivas:${{ needs.check-version.outputs.new_version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/jivas:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/jivas:${{ needs.check-version.outputs.new_version }}
            registry.v75inc.dev/jivas-jaclang/jivas:latest
            registry.v75inc.dev/jivas-jaclang/jivas:${{ needs.check-version.outputs.new_version }}
          build-args: |
            JIVAS_VERSION=${{ needs.check-version.outputs.new_version }}
